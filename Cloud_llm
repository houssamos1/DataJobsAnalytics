import os
import re
import csv
import json
from dotenv import load_dotenv
from groq import Groq

def initialize():
    """Load the environment variables"""
    load_dotenv()
    return os.environ.get("GROQ_API_KEY")

client = Groq(api_key=initialize())

# Read input data
try:
    with open("input.csv", "rt", encoding="utf-8") as file:
        query = file.read()
except FileNotFoundError:
    print("Error: input.csv file not found")
    exit(1)

# Generate AI response
pattern = r'\{.*?"ID":\s*\d+.*?"problem":\s*".*?".*?"solution":\s*".*?".*?"category":\s*".*?".*?\}'
chat_content = f"Classify each problem by AI tool category and return JSON matching this pattern {pattern}: {query}"

try:
    chat_completion = client.chat.completions.create(
        messages=[{"role": "user", "content": chat_content}],
        model="deepseek-r1-distill-llama-70b",
    )
except Exception as e:
    print(f"API Error: {str(e)}")
    exit(1)

# Process response safely
response_text = ""
try:
    if chat_completion.choices and len(chat_completion.choices) > 0:
        response_text = chat_completion.choices[0].message.content or ""
except AttributeError:
    print("Error: Unexpected API response structure")
    exit(1)

# Clean markdown only if response exists
if response_text:
    response_text = response_text.replace('```json', '').replace('```', '')
else:
    print("Error: Empty response from API")
    exit(1)

# Parse JSON data
parsed_data = []
if response_text:
    for match in re.findall(pattern, response_text, re.DOTALL):
        try:
            parsed_data.append(json.loads(match))
        except json.JSONDecodeError as e:
            print(f"JSON Parse Error: {e}\nProblematic entry: {match}")

# Save to CSV
if parsed_data:
    try:
        with open("output.csv", "w", newline="", encoding="utf-8") as csvfile:
            fieldnames = ["ID", "problem", "solution", "category"]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames, quoting=csv.QUOTE_ALL)
            writer.writeheader()
            writer.writerows(parsed_data)
        print("Successfully saved to output.csv")
    except Exception as e:
        print(f"File Save Error: {str(e)}")
else:
    print("No valid data to save")